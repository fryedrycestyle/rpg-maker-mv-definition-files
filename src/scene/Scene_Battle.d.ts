declare class Scene_Battle extends Scene_Base {
	private _statusWindow: Window_BattleStatus;
	private _partyCommandWindow: Window_BattlePartyCommand;
	private _actorCommandWindow: Window_BattleActorCommand;
	private _logWindow: Window_BattleLog;
	private _helpWindow: Window_Help;
	private _skillWindow: Window_BattleSkill;
	private _itemWindow: Window_BattleItem;
	private _actorWindow: Window_BattleActor;
	private _enemyWindow: Window_BattleEnemy;
	private _messageWindow: Window_Message;
	private _scrollTextWindow: Window_ScrollText;
	
	private _spriteset: Spriteset_Battle;
	
	constructor();
	create(): void;
	start(): void;
	update(): void;
	updateBattleProcess(): void;
	isAnyInputWindowActive(): boolean;
	changeInputWindow(): void;
	stop(): void;
	terminate(): void;
	needsSlowFadeOut(): boolean;
	updateStatusWindow(): void;
	updateWindowPositions(): void;
	createDisplayObjects(): void;
	createSpriteset(): void;
	createAllWindows(): void;
	createLogWindow(): void;
	createStatusWindow(): void;
	createPartyCommandWindow(): void;
	createActorCommandWindow(): void;
	createHelpWindow(): void;
	createSkillWindow(): void;
	createItemWindow(): void;
	createActorWindow(): void;
	createEnemyWindow(): void;
	createMessageWindow(): void;
	createScrolltextWindow(): void;
	refreshStatus(): void;
	startPartyCommandSelection(): void;
	commandFight(): void;
	commandEscape(): void;
	commandGuard(): void;
	startActorCommandSelection(): void;
	commandAttack(): void;
	commandSkill(): void;
	commandGuard(): void;
	commandItem(): void;
	selectNextCommand(): void;
	selectPreviousCommand(): void;
	selectActorSelection(): void;
	onActorOk(): void;
	onActorCancel(): void;
	selectEnemySelection(): void;
	onEnemyOk(): void;
	onEnemyCancel(): void;
	onSkillOk(): void;
	onSkillCancel(): void;
	onItemOk(): void;
	onItemCancel(): void;
	onSelectAction(): void;
	endCommandSelection(): void;
}