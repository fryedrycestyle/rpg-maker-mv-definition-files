/// <reference path="../main.d.ts"/>
declare class Window_Base extends Window {
	static _iconWidth: number;
	static _iconHeight: number;
	static _faceWidth: number;
	static _faceHeight: number;
	
	private _opening: boolean;
	private _closing: boolean;
	private _dimmerSprite: Sprite;
	
	public contents: Bitmap;
	public width: number;
	public height: number;
	public padding: number;
	
	constructor(x: number, y: number, width: number, height: number);
	gaugeHeight(): number;
	lineHeight(): number;
	standardFontFace(): string;
	standardFontSize(): number;
	standardPadding(): number;
	textPadding(): number;
	standardBackOpacity(): number;
	loadWindowskin(): void;
	updatePadding(): void;
	updateBackOpacity(): void;
	contentsWidth(): number;
	contentsHeight(): number;
	fittingHeight(): number;
	updateTone(): void;
	createContents(): void;
	resetFontSettings(): void;
	update(): void;
	updateOpen(): void;
	updateClose(): void;
	open(): void;
	close(): void;
	isOpening(): boolean;
	isClosing(): boolean;
	show(): void;
	hide(): void;
	activate(): void;
	deactivate(): void;
	textColor(value: number): string;
	normalColor(): string;
	systemColor(): string;
	crisisColor(): string;
	deathColor(): string;
	gaugeBackColor(): string;
	hpGaugeColor1(): string;
	hpGaugeColor2(): string;
	mpGaugeColor1(): string;
	mpGaugeColor2(): string;
	mpCostColor(): string;
	powerUpColor(): string;
	powerDownColor(): string;
	tpGaugeColor1(): string;
	tpGaugeColor2(): string;
	tpCostColor(): string;
	pendingColor(): string;
	translucentOpacity(): number;
	changeTextColor(color: string): void;
	changePaintOpacity(enabled: boolean): void;
	drawText(text: string, x: number, y: number,width: number, textAlign: textAlign): void;
	textWidth(text: string): number;
	drawTextEx(text: string, x: number, y: number): number;
	convertEscapeCharacters(text: string): string;
	actorName(n: number): string;
	partyMemberName(n: number): string;
	processCharacter(textState: any): void;
	processNormalCharacter(textState: any): void;
	processNewLine(textState: any): void;
	processNewPage(textState: any): void;
	obtainEscapeCode(textState: any): string;
	obtainEscapeParam(textState: any): string;
	processEscapeCharacter(code: string, textState: any): void;
	processDrawIcon(iconIndex: number, textSTate: any): void;
	makeFontBigger(): void;
	makeFontSmaller(): void;
	calcTextHeight(textState: any, all: boolean): number;
	drawIcon(iconIndex: number, x: number, y: number): void;
	drawFace(faceName: string, faceIndex: number, x: number, y: number, width: number, height: number): void;
	drawCharacter(characterName: string, characterIndex: number, x: number, y: number): void;
	drawGauge(dx: number, dy: number, dw: number,rate: number, color1: any, color2: any): void;
	hpColor(): string;
	mpColor(): string;
	tpColor(): string;
	drawActorCharacter(actor: Game_Actor, x: number, y: number): void;
	drawActorFace(actor: Game_Actor, x: number, y: number, width: number, height: number): void;
	drawActorName(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorClass(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorNickname(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorLevel(actor: Game_Actor,x: number, y: number): void;
	drawActorIcons(actor: Game_Actor, x: number, y: number, width: number): void;
	drawCurrentAndMax(current: number, max: number, x: number, y: number, width: number, color1: any, color2: any): void;
	drawActorHp(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorMp(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorTp(actor: Game_Actor, x: number, y: number, width: number): void;
	drawActorSimpleStatus(actor: Game_Actor, x: number, y: number, width: number): void;
	drawItemName(item: Game_Item, x: number, y: number, width: number): void;
	drawCurrencyValue(value: number, unit: string, ex: number, wy: number, ww: number): void;
	paramchangeTextColor(change: number): string;
	setBackgoundType(type: number): void;
	showBackgroundDimmer(): void;
	hideBackgroundDimmer(): void;
	updateBackgroundDimmer(): void;
	refreshDimmerBitmap(): void;
	dimColor1(): string;
	dimColor2(): string;
	canvasToLocalX(x: number): number;
	canvasToLocalY(y: number): number;
}
