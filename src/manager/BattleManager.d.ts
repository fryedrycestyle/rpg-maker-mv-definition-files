/// <reference path="../main.d.ts"/>
declare class BattleManager {
	static _phase: string;
	static _canEscape: boolean;
	static _canLose: boolean;
	static _battleTest: boolean;
	static _eventCallback: {};
	static _preemtpive: boolean;
	static _surprise: boolean;
	static _actorIndex: number;
	static _actionForcedBattler: {};
	static _mapBgm: {};
	static _mapBgs: {};
	static _actionBattlers: {}[];
	static _subject: {};
	static _action: {};
	static _targets: {}[];
	static _logWindow: {};
	static _statusWindow: {};
	static _spriteset: {};
	static _escapeRatio: number;
	static _escaped: boolean;
	static _rewards: {};
	
	static isBattletest(): boolean;
	static setBattleTest(battleTest: boolean): void;
	static setEventCallback(callback: {}): void;
	static setLogWindow(logWindow: {}): void;
	static setSpriteset(spriteset: {}): void;
	static onEncounter(): void;
	static ratePreemptive(): number;
	static rateSurprise(): number;
	static saveBgmAndBgs(): void;
	static makeEscapeRatio(): void;
	static update(): void;
	static updateEvent(): boolean;
	static updateEventMain(): boolean;
	static isBusy(): boolean;
	static isInputting(): boolean;
	static isInTurn(): boolean;
	static isTurnEnd(): boolean;
	static isAborting(): boolean;
	static isBattleEnd(): boolean;
	static canEscape(): boolean;
	static canLose(): boolean;
	static isEscaped(): boolean;
	static actor(): IActor;
	static clearActor(): void;
	static changeActor(newActorIndex: number, lastActorActionState: {}): void;
	static startbattle(): void;
	static displayStartMessages(): void;
	static startInput(): void;
	static inputtingAction(): boolean;
	static selectNextCommand(): void;
	static selectPreviousCommand(): void;
	static refreshStatus(): void;
	static startTurn(): void;
	static updateTurn(): void;
	static processTurn(): void;
	static endTurn(): void;
	static updateTurnEnd(): void;
	static getNextSubject(): {};
	static allBattleMembers(): {}[];
	static makeActionOrders(): void;
	static startAction(): void;
	static updateAction(): void;
	static endAction(): void;
	static invokeAction(subject: {}, target: {}): void;
	static invokeNormalAction(subject: {}, target: {}): void;
	static invokeCounterAttack(subject: {}, target: {}): void;
	static invokeMagicReflection(subject: {}, target: {}): void;
	static applySubstitute(target: {}): {};
	static checkSubstitute(target: {}): boolean;
	static isActionForced(): boolean;
	static forceAction(battler: {}): void;
	static processForcedAction(): void;
	static abort(): void;
	static checkBattleEnd(): boolean;
	static checkAbort(): boolean;
	static processVictory(): void;
	static processEscape(): void;
	static processAbort(): void;
	static processDefeat(): void;
	static endBattle(result: number): void;
	static updateBattleEnd(): void;
	static makeRewards(): void;
	static displayVictoryMessage(): void;
	static displayDefeatMessage(): void;
	static displayEscapeSuccessMessage(): void;
	static displayEscapeFailureMessage(): void;
	static displayRewards(): void;
	static displayExp(): void;
	static displayGold(): void;
	static displayDropItems(): void;
	static gainRewards(): void;
	static gainExp(): void;
	static gainGold(): void;
	static gainDropItems(): void;
	
}